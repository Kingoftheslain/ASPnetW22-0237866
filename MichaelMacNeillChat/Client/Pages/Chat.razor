@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div id="messagebox">
<div class="form-group">
        <label for="username">Name: </label>
        <input id="username" @bind="userInput" />
</div>

<div class="form-group">
        <label>Message:</label>
        <input @bind="messageInput" @onfocus="someoneTyping" @onblur="noonesTyping" size="50" />
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>
    <div class="messages">
        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
                <br /> <br />
            }
        </ul>
    </div>
</div>
@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private List<string> someonesTyping = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (name, message) =>
            {
                var msg = $"{name}: {message} {@DateTime.Now.ToString("h:mm tt")}";
                messages.Add(msg);
                messageInput = string.Empty;
                StateHasChanged();
            });

        hubConnection.On<string, string>("someonesTyping", (name, msg) =>
        {
            var typingMessage = $"{name} {msg}";
            if (!someonesTyping.Contains(typingMessage) && userInput.Length > 0)
            {
                someonesTyping.Add(typingMessage);
                StateHasChanged();
            }
            StateHasChanged();
        });

        hubConnection.On<string>("noonesTyping", (name) =>
        {
            var typingMessage = $"{name} is typing...";
            if (someonesTyping.Contains(typingMessage))
            {

            someonesTyping.Remove(typingMessage);
                StateHasChanged();
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);

    async Task someoneTyping() =>
    await hubConnection.SendAsync("someonesTyping", userInput, "is typing...");

    async Task noonesTyping() =>
    await hubConnection.SendAsync("noonesTyping", userInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}